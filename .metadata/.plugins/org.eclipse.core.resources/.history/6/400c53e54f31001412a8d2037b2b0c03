package objectGeometry;
import java.util.*;

public class ShapeBase implements Shape
{
	//List of protected points that work with the object.
	protected ArrayList<Point> PointList;
	//Key point. Used for various manipulations of Shape location.
	protected Point keyPoint;
	/*
	 * Creates a shape object with no points.
	 * Shape is not intended to be used as
	 * an actual shape, instead it is suggested
	 * that class's based off it are created.
	 * 
	 */
	public ShapeBase()
	{
		
	}
	@Override
	public void setLocation(float xPos, float yPos) 
	{
		if( keyPoint != null)
		{
			float keyPointXLoc = keyPoint.getXPos();
			float keyPointYLoc = keyPoint.getYPos();
			float extraShiftY = 0;
			float extraShiftX = 0;
			for( Point movingPoint: PointList )
			{
				extraShiftX = movingPoint.getXPos() - keyPointXLoc;
				extraShiftY = movingPoint.getYPos() - keyPointYLoc;
				movingPoint.setPosition(xPos + extraShiftX,
										yPos + extraShiftY );
				
			}
		}
		// TODO Auto-generated method stub
		
	}
	@Override
	public void setZLevel(int zLevel) 
	{
		// TODO Auto-generated method stub
		
	}
	@Override
	public ArrayList<ArrayList<Point>> getPointPairs() 
	{
		// TODO Auto-generated method stub
		return null;
	}
	@Override
	public boolean overlaps(Shape checkObject) 
	{
		// TODO Auto-generated method stub
		return false;
	}
	@Override
	public void moveBy(float xPos, float yPos) 
	{
		// TODO Auto-generated method stub
		
	}
	@Override
	public Shape copy() 
	{
		// TODO Auto-generated method stub
		return null;
	}
	@Override
	public ArrayList<Point> getPoints() 
	{
		// TODO Auto-generated method stub
		return null;
	}
	

}
